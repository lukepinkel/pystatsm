#!/usr/bin/env python3from pystatsm.pystatsm.pyglm2.ols import OLS

# -*- coding: utf-8 -*-
"""
Created on Wed Apr  5 22:57:33 2023

@author: lukepinkel
"""

import numpy as np                                           
import scipy as sp                                           
import scipy.stats    
import pandas as pd
from pystatsm.pyglm2.glm import GLM
from pystatsm.pyglm2.clm import CLM, OrderedTransform
from pystatsm.pyglm2.ols import OLS
from pystatsm.pyglm2.model_sim import LinearModelSim
from pystatsm.pyglm2.families import Binomial, Gaussian, Gamma, InverseGaussian, Poisson, NegativeBinomial
from pystatsm.pyglm2.links import LogitLink, LogLink, IdentityLink
from pystatsm.utilities import func_utils
from pystatsm.utilities import numerical_derivs 

def check_model(model):
    assert(model.opt.success)
    x = model.params_init
    assert(np.allclose(numerical_derivs.jac_approx(model.loglike, x), model.gradient(x), rtol=1e-5, atol=1e-5))
    assert(np.allclose(numerical_derivs.jac_approx(model.gradient, x), model.hessian(x), rtol=1e-5, atol=1e-4))
    assert(np.max(np.abs(model.opt.grad))<1e-3)
    
    
def check_ordinal_model(model):
    assert(model.opt.success)
    x = model.params_init
    y = OrderedTransform._rvs(model.params_init.copy(), model.q)
    
    g1_nm, g1_an = numerical_derivs.jac_approx(model.loglike, y), model.gradient(y)
    H1_nm, H1_an = numerical_derivs.jac_approx(model.gradient, y), model.hessian(y)

    g2_nm = numerical_derivs.jac_approx(model.loglike_unconstrained, x)
    g2_an = model.gradient_unconstrained(x)
    
    H2_nm = numerical_derivs.jac_approx(model.gradient_unconstrained, x)
    H2_an = model.hessian_unconstrained(x)
    
    assert(np.allclose(g1_nm, g1_an, rtol=1e-5, atol=1e-5))
    assert(np.allclose(H1_nm, H1_an, rtol=1e-5, atol=1e-4))
    
    assert(np.allclose(g2_nm, g2_an, rtol=1e-5, atol=1e-5))
    assert(np.allclose(H2_nm, H2_an, rtol=1e-5, atol=1e-4))
    
    assert(np.max(np.abs(model.opt.grad))<1e-3)


def test_glm():
    seed = 23644
    rng = np.random.default_rng(seed)

    clmlg_data = pd.DataFrame(
        {'parameter': {'0.0|1.0': -3.227757246973489,
         '1.0|2.0': -1.5874718317572294,
         '2.0|3.0': -0.3814946930780918,
         '3.0|4.0': 0.6922659980393919,
         '4.0|5.0': 1.8332843256406717,
         '5.0|6.0': 3.390220280263682,
         'C(x0)[T.1.0]': -1.5254598930130376,
         'C(x0)[T.2.0]': -0.8846304391284429,
         'C(x0)[T.3.0]': 0.9183305159535943,
         'C(x0)[T.4.0]': 1.9840887184400338,
         'x1': -1.6809054723401835,
         'x2': -1.625888329259848,
         'x3': 1.699327989316019},
        'SE': {'0.0|1.0': 0.1865119912287187,
         '1.0|2.0': 0.15811672257326392,
         '2.0|3.0': 0.14927494085985993,
         '3.0|4.0': 0.14994110916759862,
         '4.0|5.0': 0.15868166972868622,
         '5.0|6.0': 0.18544756419486072,
         'C(x0)[T.1.0]': 0.1975030362676632,
         'C(x0)[T.2.0]': 0.1914232715228947,
         'C(x0)[T.3.0]': 0.19408436067448098,
         'C(x0)[T.4.0]': 0.20834222502754196,
         'x1': 0.09313370671088472,
         'x2': 0.09108931920944298,
         'x3': 0.09182334814666855},
        't': {'0.0|1.0': -17.305896664924386,
         '1.0|2.0': -10.039873113494803,
         '2.0|3.0': -2.555651275964939,
         '3.0|4.0': 4.616919281726819,
         '4.0|5.0': 11.55322053754047,
         '5.0|6.0': 18.281287732101873,
         'C(x0)[T.1.0]': -7.723728818759422,
         'C(x0)[T.2.0]': -4.621331733026195,
         'C(x0)[T.3.0]': 4.731604920469721,
         'C(x0)[T.4.0]': 9.523219396249347,
         'x1': -18.04830422521702,
         'x2': -17.8493850143003,
         'x3': 18.50649125320173},
        'p': {'0.0|1.0': 8.366018646105073e-59,
         '1.0|2.0': 1.1905903056353734e-22,
         '2.0|3.0': 0.010747825993394806,
         '3.0|4.0': 4.408775736311551e-06,
         '4.0|5.0': 4.771558816158251e-29,
         '5.0|6.0': 1.579433712244724e-64,
         'C(x0)[T.1.0]': 2.7670792139742888e-14,
         'C(x0)[T.2.0]': 4.317969152932846e-06,
         'C(x0)[T.3.0]': 2.552276071421413e-06,
         'C(x0)[T.4.0]': 1.2500842874360664e-20,
         'x1': 3.8028695912346116e-63,
         'x2': 5.658795567412916e-62,
         'x3': 7.158608781789241e-66},
        'LowerCI95': {'0.0|1.0': -3.593762858083757,
         '1.0|2.0': -1.8977554081156658,
         '2.0|3.0': -0.6744274187057053,
         '3.0|4.0': 0.3980260034422611,
         '4.0|5.0': 1.5218921137060284,
         '5.0|6.0': 3.026303469259203,
         'C(x0)[T.1.0]': -1.9130340055891777,
         'C(x0)[T.2.0]': -1.2602738013214245,
         'C(x0)[T.3.0]': 0.5374651111738126,
         'C(x0)[T.4.0]': 1.5752441026653408,
         'x1': -1.863668301770708,
         'x2': -1.8046393131683665,
         'x3': 1.5191365687472516},
        'UpperCI95': {'0.0|1.0': -2.8617516358632216,
         '1.0|2.0': -1.2771882553987932,
         '2.0|3.0': -0.08856196745047834,
         '3.0|4.0': 0.9865059926365227,
         '4.0|5.0': 2.144676537575315,
         '5.0|6.0': 3.7541370912681606,
         'C(x0)[T.1.0]': -1.1378857804368978,
         'C(x0)[T.2.0]': -0.5089870769354612,
         'C(x0)[T.3.0]': 1.2991959207333759,
         'C(x0)[T.4.0]': 2.3929333342147268,
         'x1': -1.498142642909659,
         'x2': -1.4471373453513297,
         'x3': 1.8795194098847863}}
        )
    
    binom_data = pd.DataFrame(
        {'parameter': {'Intercept': 0.001145792400540184,
          'C(x0)[T.1.0]': -1.0183662305811134,
          'C(x0)[T.2.0]': -0.500557207822804,
          'C(x0)[T.3.0]': 0.5271267872106593,
          'C(x0)[T.4.0]': 1.0357777205186836,
          'x1': -1.0040001411171577,
          'x2': -0.9482029085046402,
          'x3': 0.9668184385810095},
         'SE': {'Intercept': 0.05318256938655679,
          'C(x0)[T.1.0]': 0.0769446595840391,
          'C(x0)[T.2.0]': 0.07485207251384894,
          'C(x0)[T.3.0]': 0.07615841414408524,
          'C(x0)[T.4.0]': 0.080588869306645,
          'x1': 0.034462956574665,
          'x2': 0.03393770973415177,
          'x3': 0.03350081071369671},
         't': {'Intercept': 0.021544510048245456,
          'C(x0)[T.1.0]': -13.235047579473036,
          'C(x0)[T.2.0]': -6.6872858828350035,
          'C(x0)[T.3.0]': 6.9214517284115225,
          'C(x0)[T.4.0]': 12.852615124521645,
          'x1': -29.132733836749097,
          'x2': -27.939507878766978,
          'x3': 28.85955348494681},
         'p': {'Intercept': 0.9828156304311776,
          'C(x0)[T.1.0]': 6.093854678263674e-37,
          'C(x0)[T.2.0]': 3.790458773264768e-11,
          'C(x0)[T.3.0]': 8.014507979487111e-12,
          'C(x0)[T.4.0]': 4.41392781170213e-35,
          'x1': 2.5556387925918167e-135,
          'x2': 3.451542495570633e-127,
          'x3': 1.8693139706116716e-133},
         'LowerCI95': {'Intercept': -0.10321746180704885,
          'C(x0)[T.1.0]': -1.1693592187107036,
          'C(x0)[T.2.0]': -0.6474437904350072,
          'C(x0)[T.3.0]': 0.3776766943128329,
          'C(x0)[T.4.0]': 0.8776334873467239,
          'x1': -1.0716288085402104,
          'x2': -1.0148008534528197,
          'x3': 0.9010778460334516},
         'UpperCI95': {'Intercept': 0.10550904660812921,
          'C(x0)[T.1.0]': -0.8673732424515233,
          'C(x0)[T.2.0]': -0.3536706252106008,
          'C(x0)[T.3.0]': 0.6765768801084857,
          'C(x0)[T.4.0]': 1.1939219536906431,
          'x1': -0.9363714736941052,
          'x2': -0.8816049635564606,
          'x3': 1.0325590311285673}}
        )
    gamma_data = pd.DataFrame(
        {'parameter': {'Intercept': 0.007483302411522213,
          'C(x0)[T.1.0]': -0.9694386077006701,
          'C(x0)[T.2.0]': -0.572313657760015,
          'C(x0)[T.3.0]': 0.48601820945821556,
          'C(x0)[T.4.0]': 1.0356187289542687,
          'x1': -1.019895019714107,
          'x2': -1.0115889602077544,
          'x3': 1.0014048446746717,
          'log_scale': -0.03470998413192271},
         'SE': {'Intercept': 0.07198267910683913,
          'C(x0)[T.1.0]': 0.09993265740879496,
          'C(x0)[T.2.0]': 0.09948719645104351,
          'C(x0)[T.3.0]': 0.10121125479608416,
          'C(x0)[T.4.0]': 0.10501668078306602,
          'x1': 0.040753916468636006,
          'x2': 0.03878335371153259,
          'x3': 0.0394468555031309,
          'log_scale': 0.03949759853320784},
         't': {'Intercept': 0.10395976510425851,
          'C(x0)[T.1.0]': -9.700918927182967,
          'C(x0)[T.2.0]': -5.752636300708744,
          'C(x0)[T.3.0]': 4.802017428174594,
          'C(x0)[T.4.0]': 9.861468875535653,
          'x1': -25.02569343240944,
          'x2': -26.083070786808957,
          'x3': 25.386176715535417,
          'log_scale': -0.8787872027900654},
         'p': {'Intercept': 0.9172223130835864,
          'C(x0)[T.1.0]': 2.558015397098981e-21,
          'C(x0)[T.2.0]': 1.1701038041751507e-08,
          'C(x0)[T.3.0]': 1.8129651025531691e-06,
          'C(x0)[T.4.0]': 6.019882446992203e-22,
          'x1': 1.6211508908866938e-107,
          'x2': 1.3364181030301768e-114,
          'x3': 6.331776850328266e-110,
          'log_scale': 0.3797296880936104},
         'LowerCI95': {'Intercept': -0.1337726764738475,
          'C(x0)[T.1.0]': -1.1655425249214235,
          'C(x0)[T.2.0]': -0.7675434199142556,
          'C(x0)[T.3.0]': 0.28740522300326854,
          'C(x0)[T.4.0]': 0.829538124184239,
          'x1': -1.0998689028151434,
          'x2': -1.0876958884432104,
          'x3': 0.9239958866144392,
          'log_scale': -0.11221851831899668},
         'UpperCI95': {'Intercept': 0.14873928129689187,
          'C(x0)[T.1.0]': -0.773334690479917,
          'C(x0)[T.2.0]': -0.3770838956057744,
          'C(x0)[T.3.0]': 0.6846311959131626,
          'C(x0)[T.4.0]': 1.2416993337242983,
          'x1': -0.9399211366130706,
          'x2': -0.9354820319722983,
          'x3': 1.0788138027349043,
          'log_scale': 0.04279855005515125}}
        )
    
    gauss_data = pd.DataFrame(
        {'parameter': {'Intercept': -0.018226833254449442,
          'C(x0)[T.1.0]': -0.9258887524062518,
          'C(x0)[T.2.0]': -0.5365277006038386,
          'C(x0)[T.3.0]': 0.5001961257275146,
          'C(x0)[T.4.0]': 1.079322501092367,
          'x1': -0.9981161382558615,
          'x2': -0.9670660523418747,
          'x3': 1.0022280792059057,
          'log_scale': -0.004693350552999764},
         'SE': {'Intercept': 0.07265228564283975,
          'C(x0)[T.1.0]': 0.1006871373653793,
          'C(x0)[T.2.0]': 0.10104121128754555,
          'C(x0)[T.3.0]': 0.10266846578645182,
          'C(x0)[T.4.0]': 0.10540053411391934,
          'x1': 0.04087774821583621,
          'x2': 0.04031790895103209,
          'x3': 0.04058841603184382,
          'log_scale': 0.04472135955021994},
         't': {'Intercept': -0.2508776302517578,
          'C(x0)[T.1.0]': -9.195700430396915,
          'C(x0)[T.2.0]': -5.309988803251526,
          'C(x0)[T.3.0]': 4.871954810037891,
          'C(x0)[T.4.0]': 10.240199541359157,
          'x1': -24.417101768565306,
          'x2': -23.98601707038973,
          'x3': 24.692465909968085,
          'log_scale': -0.10494650878691102},
         'p': {'Intercept': 0.8019607257611862,
          'C(x0)[T.1.0]': 2.1398962458269197e-19,
          'C(x0)[T.2.0]': 1.353405192281773e-07,
          'C(x0)[T.3.0]': 1.285805637751892e-06,
          'C(x0)[T.4.0]': 1.8401303733634968e-23,
          'x1': 1.8109172566717092e-103,
          'x2': 1.2897327226168968e-100,
          'x3': 2.6865441220179696e-105,
          'log_scale': 0.916439490609074},
         'LowerCI95': {'Intercept': -0.16079682167495218,
          'C(x0)[T.1.0]': -1.1234732314251916,
          'C(x0)[T.2.0]': -0.7348070003642952,
          'C(x0)[T.3.0]': 0.2987235657273625,
          'C(x0)[T.4.0]': 0.8724886376402368,
          'x1': -1.0783330239081352,
          'x2': -1.0461843314356039,
          'x3': 0.9225789676540129,
          'log_scale': -0.09245278794452493},
         'UpperCI95': {'Intercept': 0.12434315516605328,
          'C(x0)[T.1.0]': -0.728304273387312,
          'C(x0)[T.2.0]': -0.33824840084338204,
          'C(x0)[T.3.0]': 0.7016686857276666,
          'C(x0)[T.4.0]': 1.2861563645444973,
          'x1': -0.917899252603588,
          'x2': -0.8879477732481456,
          'x3': 1.0818771907577984,
          'log_scale': 0.08306608683852537}}
        )
    igaus_data = pd.DataFrame(
        {'parameter': {'Intercept': 0.059502754643715176,
          'C(x0)[T.1.0]': -1.0398079697079459,
          'C(x0)[T.2.0]': -0.5370954236655527,
          'C(x0)[T.3.0]': 0.42492935352552974,
          'C(x0)[T.4.0]': 0.9960542463769615,
          'x1': -1.0135917343412157,
          'x2': -1.0300105026042847,
          'x3': 0.9947770412925016,
          'log_scale': -0.0030465406939700584},
         'SE': {'Intercept': 0.05801084899885236,
          'C(x0)[T.1.0]': 0.05807007610155208,
          'C(x0)[T.2.0]': 0.06420019664171442,
          'C(x0)[T.3.0]': 0.07518400033398183,
          'C(x0)[T.4.0]': 0.08480254019272161,
          'x1': 0.023284504686821406,
          'x2': 0.02170599697154264,
          'x3': 0.02477819448131053,
          'log_scale': 0.04472135955153594},
         't': {'Intercept': 1.0257177005785991,
          'C(x0)[T.1.0]': -17.90608932369135,
          'C(x0)[T.2.0]': -8.365946706720399,
          'C(x0)[T.3.0]': 5.6518587949285966,
          'C(x0)[T.4.0]': 11.745570876925811,
          'x1': -43.53074063520405,
          'x2': -47.45280780950382,
          'x3': 40.147277157051654,
          'log_scale': -0.06812272087701829},
         'p': {'Intercept': 0.30527496846689167,
          'C(x0)[T.1.0]': 2.4414922891019773e-62,
          'C(x0)[T.2.0]': 2.0085776098780167e-16,
          'C(x0)[T.3.0]': 2.0743697291718742e-08,
          'C(x0)[T.4.0]': 6.452704597394944e-30,
          'x1': 3.0070571330469842e-232,
          'x2': 2.3900726063299096e-257,
          'x3': 5.138670546725033e-210,
          'log_scale': 0.9457016856124423},
         'LowerCI95': {'Intercept': -0.05433545425570469,
          'C(x0)[T.1.0]': -1.1537624035447007,
          'C(x0)[T.2.0]': -0.663079364993974,
          'C(x0)[T.3.0]': 0.27739122775041486,
          'C(x0)[T.4.0]': 0.8296410762154375,
          'x1': -1.0592843307159099,
          'x2': -1.0726054975105914,
          'x3': 0.94615328680186,
          'log_scale': -0.09080597808807768},
         'UpperCI95': {'Intercept': 0.17334096354313502,
          'C(x0)[T.1.0]': -0.9258535358711911,
          'C(x0)[T.2.0]': -0.4111114823371315,
          'C(x0)[T.3.0]': 0.5724674793006446,
          'C(x0)[T.4.0]': 1.1624674165384854,
          'x1': -0.9678991379665215,
          'x2': -0.987415507697978,
          'x3': 1.0434007957831433,
          'log_scale': 0.08471289670013754}}
        )
    logit_data = pd.DataFrame(
        {'parameter': {'Intercept': 0.19162204857660975,
          'C(x0)[T.1.0]': -1.0273492070416776,
          'C(x0)[T.2.0]': -0.68363797685574,
          'C(x0)[T.3.0]': 0.23402425191407755,
          'C(x0)[T.4.0]': 1.110018595224206,
          'x1': -1.0762170854194046,
          'x2': -0.9018526884154093,
          'x3': 0.8588578392263655},
         'SE': {'Intercept': 0.16939824350527408,
          'C(x0)[T.1.0]': 0.24161140847111026,
          'C(x0)[T.2.0]': 0.23742529722439273,
          'C(x0)[T.3.0]': 0.23989885436053462,
          'C(x0)[T.4.0]': 0.2588519442753112,
          'x1': 0.1102665241481716,
          'x2': 0.10604235279368224,
          'x3': 0.10404186768707761},
         't': {'Intercept': 1.1311926535450987,
          'C(x0)[T.1.0]': -4.252072422997853,
          'C(x0)[T.2.0]': -2.879381366887909,
          'C(x0)[T.3.0]': 0.9755121696511799,
          'C(x0)[T.4.0]': 4.288237425961175,
          'x1': -9.760143377451787,
          'x2': -8.504646159351715,
          'x3': 8.254925236535703},
         'p': {'Intercept': 0.2582474051261047,
          'C(x0)[T.1.0]': 2.3180596172880247e-05,
          'C(x0)[T.2.0]': 0.004070207633718728,
          'C(x0)[T.3.0]': 0.3295440873581432,
          'C(x0)[T.4.0]': 1.976868534779335e-05,
          'x1': 1.5003319088346075e-21,
          'x2': 6.634397100098627e-17,
          'x3': 4.811298069753163e-16},
         'LowerCI95': {'Intercept': -0.14079799342551247,
          'C(x0)[T.1.0]': -1.5014773496375469,
          'C(x0)[T.2.0]': -1.1495514694784763,
          'C(x0)[T.3.0]': -0.23674324598094676,
          'C(x0)[T.4.0]': 0.6020583448237883,
          'x1': -1.292599509642251,
          'x2': -1.109945775098343,
          'x3': 0.6546904210120155},
         'UpperCI95': {'Intercept': 0.524042090578732,
          'C(x0)[T.1.0]': -0.5532210644458084,
          'C(x0)[T.2.0]': -0.2177244842330039,
          'C(x0)[T.3.0]': 0.7047917498091018,
          'C(x0)[T.4.0]': 1.6179788456246236,
          'x1': -0.8598346611965584,
          'x2': -0.6937596017324756,
          'x3': 1.0630252574407155}}
        )
    nbinm_data = pd.DataFrame(
        {'parameter': {'Intercept': 0.03741512295183757,
          'C(x0)[T.1.0]': -1.1521579968056035,
          'C(x0)[T.2.0]': -0.3814115290852706,
          'C(x0)[T.3.0]': 0.3531010443116159,
          'C(x0)[T.4.0]': 0.8262303570667265,
          'x1': -0.925442040764697,
          'x2': -1.0661510051555758,
          'x3': 1.11221239348906,
          'log_scale': 0.3592599903457241},
         'SE': {'Intercept': 0.11653590117651748,
          'C(x0)[T.1.0]': 0.1768105121568035,
          'C(x0)[T.2.0]': 0.1625052398908256,
          'C(x0)[T.3.0]': 0.15949086076130228,
          'C(x0)[T.4.0]': 0.16443589616591195,
          'x1': 0.07194238299859473,
          'x2': 0.07328392379014355,
          'x3': 0.06973503040737099,
          'log_scale': 0.08201900578875446},
         't': {'Intercept': 0.321060914053985,
          'C(x0)[T.1.0]': -6.516343303071359,
          'C(x0)[T.2.0]': -2.347072188819947,
          'C(x0)[T.3.0]': 2.213926507300472,
          'C(x0)[T.4.0]': 5.024634987442642,
          'x1': -12.863655639301994,
          'x2': -14.548224904122419,
          'x3': 15.949120363063601,
          'log_scale': 4.380204159887316},
         'p': {'Intercept': 0.7482319247860567,
          'C(x0)[T.1.0]': 1.1446737551917442e-10,
          'C(x0)[T.2.0]': 0.019117628010105834,
          'C(x0)[T.3.0]': 0.027060860635474433,
          'C(x0)[T.4.0]': 5.981603062287681e-07,
          'x1': 3.927845130565662e-35,
          'x2': 1.3315948780383048e-43,
          'x3': 3.8053174207561905e-51,
          'log_scale': 1.311813584549266e-05},
         'LowerCI95': {'Intercept': -0.191270346944957,
          'C(x0)[T.1.0]': -1.4991239930956735,
          'C(x0)[T.2.0]': -0.7003054216105828,
          'C(x0)[T.3.0]': 0.04012245085485394,
          'C(x0)[T.4.0]': 0.5035478205868911,
          'x1': -1.0666189441518226,
          'x2': -1.2099604954382739,
          'x3': 0.9753671120266434,
          'log_scale': 0.1983091186408871},
         'UpperCI95': {'Intercept': 0.2661005928486321,
          'C(x0)[T.1.0]': -0.8051920005155337,
          'C(x0)[T.2.0]': -0.0625176365599584,
          'C(x0)[T.3.0]': 0.6660796377683778,
          'C(x0)[T.4.0]': 1.1489128935465618,
          'x1': -0.7842651373775716,
          'x2': -0.9223415148728777,
          'x3': 1.2490576749514766,
          'log_scale': 0.520210862050561}}
        )
    poiss_data = pd.DataFrame(
        {'parameter': {'Intercept': 0.06552484232009877,
          'C(x0)[T.1.0]': -1.1962324216334337,
          'C(x0)[T.2.0]': -0.5701998689235847,
          'C(x0)[T.3.0]': 0.48213724887457177,
          'C(x0)[T.4.0]': 0.9140296249705034,
          'x1': -1.0254818841592759,
          'x2': -1.0427664065271565,
          'x3': 0.977032124357821},
         'SE': {'Intercept': 0.04965400526372917,
          'C(x0)[T.1.0]': 0.08819352154263363,
          'C(x0)[T.2.0]': 0.06891373095965715,
          'C(x0)[T.3.0]': 0.056312622943295525,
          'C(x0)[T.4.0]': 0.05307823586661181,
          'x1': 0.02512934560253675,
          'x2': 0.02633174593958524,
          'x3': 0.026932620460443892},
         't': {'Intercept': 1.319628536954355,
          'C(x0)[T.1.0]': -13.563722149989928,
          'C(x0)[T.2.0]': -8.274111138422992,
          'C(x0)[T.3.0]': 8.561797047885054,
          'C(x0)[T.4.0]': 17.22042208161372,
          'x1': -40.80814122178159,
          'x2': -39.60111148420041,
          'x3': 36.27690539035346},
         'p': {'Intercept': 0.18726353528723086,
          'C(x0)[T.1.0]': 1.4337982510772434e-38,
          'C(x0)[T.2.0]': 4.1392323230626275e-16,
          'C(x0)[T.3.0]': 4.186516301518321e-17,
          'C(x0)[T.4.0]': 2.4091762442702942e-58,
          'x1': 1.7852163129697425e-214,
          'x2': 1.8690875751905927e-206,
          'x3': 4.253744268518564e-184},
         'LowerCI95': {'Intercept': -0.031914104942825774,
          'C(x0)[T.1.0]': -1.3692997069185056,
          'C(x0)[T.2.0]': -0.705433297949187,
          'C(x0)[T.3.0]': 0.3716317082225097,
          'C(x0)[T.4.0]': 0.8098711105073455,
          'x1': -1.0747946630159293,
          'x2': -1.094438725614418,
          'x3': 0.9241806741926413},
         'UpperCI95': {'Intercept': 0.16296378958302327,
          'C(x0)[T.1.0]': -1.0231651363483618,
          'C(x0)[T.2.0]': -0.43496643989798234,
          'C(x0)[T.3.0]': 0.5926427895266337,
          'C(x0)[T.4.0]': 1.0181881394336614,
          'x1': -0.9761691053026225,
          'x2': -0.991094087439895,
          'x3': 1.0298835745230008}}
        )
    
    
    n_obs = 1_000
    formula = "1+C(x0)+x1+x2+x3"
    msim = LinearModelSim.from_formula(formula, n_obs, 
                                       nlevels={"x0":5},
                                       coef_kws=dict(p_nnz=(1., 1.,)),
                                       corr_kws={"eig_kws":{"p_eff":0.5, "a":4}})
    
    
    data = msim.data
    
    
    data["linpred"] = msim.linpred#msim._simulate_y(msim.linpred, resid_var)
    
    data["mubinom"] = LogitLink().inv_link(data["linpred"])
    data["mugamma"] = LogLink().inv_link(data["linpred"])
    data["mugauss"] = IdentityLink().inv_link(data["linpred"])
    data["muigaus"] = LogLink().inv_link(data["linpred"])
    data["mupoiss"] = LogLink().inv_link(data["linpred"])
    
    data["ybinom"] = Binomial(weights=np.ones(n_obs, dtype=int)*10).rvs(mu=data["mubinom"])
    data["ygamma"] = Gamma().rvs(mu=data["mugamma"],)
    data.loc[data["ygamma"]<1e-8, "ygamma"] = 1e-8
    data["ygauss"] = Gaussian().rvs(mu=data["mugauss"], phi=1)
    data["yigaus"] = InverseGaussian().rvs(mu=data["muigaus"])
    data["ylogit"] = Binomial().rvs(mu=data["mubinom"])
    data["ypoiss"] = Poisson().rvs(mu=data["mupoiss"])
    data["ynegbn"] = NegativeBinomial().rvs(mu=data["mupoiss"], dispersion=np.sqrt(2))
    data["yordin"], tau = func_utils.quantile_cut(data["ygauss"], 7, return_quantiles=True)
    #data.to_csv("/users/lukepinkel/Downloads/glmdata.csv")
    
    model_olslm = OLS(formula="ygauss~"+formula, data=data)
    model_olslm._fit()
    
    model_binom = GLM(formula="ybinom~"+formula, data=data, weights=np.ones(n_obs, dtype=int)*10., family=Binomial())
    model_gamma = GLM(formula="ygamma~"+formula, data=data, family=Gamma(link=LogLink()), scale_estimator="NR")
    model_gauss = GLM(formula="ygauss~"+formula, data=data, family=Gaussian(), scale_estimator="NR")
    
    model_igaus = GLM(formula="yigaus~"+formula, data=data, family=InverseGaussian(link=LogLink()), scale_estimator="NR")
    model_logit = GLM(formula="ylogit~"+formula, data=data, family=Binomial(link=LogitLink()))
    model_poiss = GLM(formula="ypoiss~"+formula, data=data, family=Poisson())
    model_nbinm = GLM(formula="ynegbn~"+formula, data=data, family=NegativeBinomial(), scale_estimator="NR")
    model_clmlg = CLM(formula="yordin~+"+formula, data=data)
    
    
    model_binom.fit()
    model_gamma.fit()
    
    model_gauss.fit()
    model_igaus.fit(opt_kws=dict(options=dict(initial_tr_radius=1.01)))
    model_logit.fit()
    model_poiss.fit()
    model_nbinm.fit(opt_kws=dict(options=dict(gtol=1e-12, xtol=1e-200)))
    model_clmlg.fit()
    
    check_model(model_binom)
    check_model(model_gamma)
    check_model(model_gauss)
    check_model(model_igaus)
    check_model(model_logit)
    check_model(model_poiss)
    check_model(model_nbinm)
    check_ordinal_model(model_clmlg)
    
    assert(np.allclose(model_binom.res, binom_data))
    assert(np.allclose(model_gamma.res, gamma_data))
    assert(np.allclose(model_gauss.res, gauss_data))
    assert(np.allclose(model_igaus.res, igaus_data))
    assert(np.allclose(model_logit.res, logit_data))
    assert(np.allclose(model_poiss.res, poiss_data))
    assert(np.allclose(model_nbinm.res, nbinm_data))
    assert(np.allclose(model_clmlg.res, clmlg_data))

    
    
    
    
#!/usr/bin/env python3from pystatsm.pystatsm.pyglm2.ols import OLS

# -*- coding: utf-8 -*-
"""
Created on Wed Apr  5 22:57:33 2023

@author: lukepinkel
"""

import numpy as np                                           
import scipy as sp                                           
import scipy.stats    
import pandas as pd
from pystatsm.pyglm2.glm import GLM
from pystatsm.pyglm2.clm import CLM, OrderedTransform
from pystatsm.pyglm2.ols import OLS
from pystatsm.pyglm2.model_sim import LinearModelSim
from pystatsm.pyglm2.families import Binomial, Gaussian, Gamma, InverseGaussian, Poisson, NegativeBinomial
from pystatsm.pyglm2.links import LogitLink, LogLink, IdentityLink
from pystatsm.utilities import func_utils
from pystatsm.utilities import numerical_derivs 


def check_model(model):
    assert(model.opt.success)
    x = model.params_init
    assert(np.allclose(numerical_derivs.jac_approx(model.loglike, x), model.gradient(x), rtol=1e-5, atol=1e-5))
    assert(np.allclose(numerical_derivs.jac_approx(model.gradient, x), model.hessian(x), rtol=1e-5, atol=1e-4))
    assert(np.max(np.abs(model.opt.grad))<1e-3)
    
    
def check_ordinal_model(model):
    assert(model.opt.success)
    x = model.params_init
    y = OrderedTransform._rvs(model.params_init.copy(), model.q)
    
    g1_nm, g1_an = numerical_derivs.jac_approx(model.loglike, y), model.gradient(y)
    H1_nm, H1_an = numerical_derivs.jac_approx(model.gradient, y), model.hessian(y)

    g2_nm = numerical_derivs.jac_approx(model.loglike_unconstrained, x)
    g2_an = model.gradient_unconstrained(x)
    
    H2_nm = numerical_derivs.jac_approx(model.gradient_unconstrained, x)
    H2_an = model.hessian_unconstrained(x)
    
    assert(np.allclose(g1_nm, g1_an, rtol=1e-5, atol=1e-5))
    assert(np.allclose(H1_nm, H1_an, rtol=1e-5, atol=1e-4))
    
    assert(np.allclose(g2_nm, g2_an, rtol=1e-5, atol=1e-5))
    assert(np.allclose(H2_nm, H2_an, rtol=1e-5, atol=1e-4))
    
    assert(np.max(np.abs(model.opt.grad))<1e-3)


def test_glm():

    clmlg_data = pd.DataFrame(
       {'parameter': {'0.0|1.0': -3.6047841445830744,
         '1.0|2.0': -1.8834063349346872,
         '2.0|3.0': -0.4987484076361537,
         '3.0|4.0': 0.7656595788592999,
         '4.0|5.0': 2.0889693054247016,
         '5.0|6.0': 3.8798919797718594,
         'C(x0)[T.1.0]': -1.7496912372385296,
         'C(x0)[T.2.0]': -0.615028929852775,
         'C(x0)[T.3.0]': 1.156055984126144,
         'C(x0)[T.4.0]': 1.9461042389621814,
         'x1': -1.781204525285665,
         'x2': 1.8078028694065762,
         'x3': -1.7976262120818123},
        'SE': {'0.0|1.0': 0.19932345794668482,
         '1.0|2.0': 0.16963492569636401,
         '2.0|3.0': 0.16109260338835013,
         '3.0|4.0': 0.16386189241381838,
         '4.0|5.0': 0.17526327599698452,
         '5.0|6.0': 0.20678368617760942,
         'C(x0)[T.1.0]': 0.20221896266096598,
         'C(x0)[T.2.0]': 0.19745845594309486,
         'C(x0)[T.3.0]': 0.21263642111651648,
         'C(x0)[T.4.0]': 0.23235045969381002,
         'x1': 0.0918687260702659,
         'x2': 0.08788079969141566,
         'x3': 0.09769545491002722},
        't': {'0.0|1.0': -18.085097367452278,
         '1.0|2.0': -11.102703804674443,
         '2.0|3.0': -3.096035430216544,
         '3.0|4.0': 4.672590848186325,
         '4.0|5.0': 11.919036053283879,
         '5.0|6.0': 18.76304679296299,
         'C(x0)[T.1.0]': -8.652458771495171,
         'C(x0)[T.2.0]': -3.1147257123798178,
         'C(x0)[T.3.0]': 5.436773145709926,
         'C(x0)[T.4.0]': 8.375727947888485,
         'x1': -19.3885841404104,
         'x2': 20.571078958708718,
         'x3': -18.400305456761924},
        'p': {'0.0|1.0': 2.304134464761003e-63,
         '1.0|2.0': 4.518574400688892e-27,
         '2.0|3.0': 0.002016602742510119,
         '3.0|4.0': 3.386282596301027e-06,
         '4.0|5.0': 1.0735091042908086e-30,
         '5.0|6.0': 2.0631617829268345e-67,
         'C(x0)[T.1.0]': 2.019583331391452e-17,
         'C(x0)[T.2.0]': 0.0018942773023509904,
         'C(x0)[T.3.0]': 6.838929322347656e-08,
         'C(x0)[T.4.0]': 1.8675369562927008e-16,
         'x1': 3.296444164576184e-71,
         'x2': 1.5674133502349883e-78,
         'x3': 3.0858537292651544e-65},
        'LowerCI95': {'0.0|1.0': -3.9959305987803577,
         '1.0|2.0': -2.216292892180249,
         '2.0|3.0': -0.8148717644244782,
         '3.0|4.0': 0.44410185125422447,
         '4.0|5.0': 1.7450378401399829,
         '5.0|6.0': 3.4741057945058467,
         'C(x0)[T.1.0]': -2.146519744184494,
         'C(x0)[T.2.0]': -1.0025155593194932,
         'C(x0)[T.3.0]': 0.7387845650482516,
         'C(x0)[T.4.0]': 1.490146574086369,
         'x1': -1.9614849941485808,
         'x2': 1.6353481892328388,
         'x3': -1.989340881157386},
        'UpperCI95': {'0.0|1.0': -3.213637690385791,
         '1.0|2.0': -1.5505197776891255,
         '2.0|3.0': -0.18262505084782926,
         '3.0|4.0': 1.0872173064643753,
         '4.0|5.0': 2.4329007707094203,
         '5.0|6.0': 4.285678165037872,
         'C(x0)[T.1.0]': -1.352862730292565,
         'C(x0)[T.2.0]': -0.22754230038605688,
         'C(x0)[T.3.0]': 1.5733274032040363,
         'C(x0)[T.4.0]': 2.4020619038379936,
         'x1': -1.6009240564227492,
         'x2': 1.9802575495803136,
         'x3': -1.6059115430062385}}
        )
    
    binom_data = pd.DataFrame(
        {'parameter': {'Intercept': 0.0743207140576992,
          'C(x0)[T.1.0]': -1.1039766536018387,
          'C(x0)[T.2.0]': -0.49104551918318473,
          'C(x0)[T.3.0]': 0.3855061203660523,
          'C(x0)[T.4.0]': 0.8976565034154063,
          'x1': -0.9782613479999674,
          'x2': 0.9703050116583117,
          'x3': -1.0008970927757916},
         'SE': {'Intercept': 0.059168762049809365,
          'C(x0)[T.1.0]': 0.08005326931124254,
          'C(x0)[T.2.0]': 0.08109883742328634,
          'C(x0)[T.3.0]': 0.08398397900040694,
          'C(x0)[T.4.0]': 0.09185347594938209,
          'x1': 0.033435623659277915,
          'x2': 0.031001886970480126,
          'x3': 0.035346839267491346},
         't': {'Intercept': 1.2560802606472423,
          'C(x0)[T.1.0]': -13.790525522569734,
          'C(x0)[T.2.0]': -6.054902077328524,
          'C(x0)[T.3.0]': 4.59023405361854,
          'C(x0)[T.4.0]': 9.772700424642395,
          'x1': -29.258055957586834,
          'x2': 31.298256541036753,
          'x3': -28.31645243302762},
         'p': {'Intercept': 0.20938260938435171,
          'C(x0)[T.1.0]': 1.0400678867661271e-39,
          'C(x0)[T.2.0]': 1.990945459331004e-09,
          'C(x0)[T.3.0]': 4.995238195826227e-06,
          'C(x0)[T.4.0]': 1.33998589262007e-21,
          'x1': 3.563271657524526e-136,
          'x2': 3.951585477184099e-150,
          'x3': 9.40119492504305e-130},
         'LowerCI95': {'Intercept': -0.04178959475550187,
          'C(x0)[T.1.0]': -1.2610698476999342,
          'C(x0)[T.2.0]': -0.6501904925000586,
          'C(x0)[T.3.0]': 0.2206994656503473,
          'C(x0)[T.4.0]': 0.7174070763770211,
          'x1': -1.043874020192984,
          'x2': 0.9094682027539077,
          'x3': -1.0702602547000528},
         'UpperCI95': {'Intercept': 0.19043102287090025,
          'C(x0)[T.1.0]': -0.9468834595037434,
          'C(x0)[T.2.0]': -0.331900545866311,
          'C(x0)[T.3.0]': 0.5503127750817574,
          'C(x0)[T.4.0]': 1.0779059304537915,
          'x1': -0.9126486758069511,
          'x2': 1.0311418205627156,
          'x3': -0.9315339308515306}}
        )
    gamma_data = pd.DataFrame(
        {'parameter': {'Intercept': -0.046869768955267226,
          'C(x0)[T.1.0]': -0.9666084138041755,
          'C(x0)[T.2.0]': -0.41955595496693776,
          'C(x0)[T.3.0]': 0.5364891672302979,
          'C(x0)[T.4.0]': 1.1666811822260865,
          'x1': -1.0505194614310722,
          'x2': 0.9693731927429677,
          'x3': -1.0490799667060957,
          'log_scale': -0.0031612352932887215},
         'SE': {'Intercept': 0.07943099765001212,
          'C(x0)[T.1.0]': 0.10268754657844203,
          'C(x0)[T.2.0]': 0.10652206910392292,
          'C(x0)[T.3.0]': 0.11271148143515827,
          'C(x0)[T.4.0]': 0.12121928240573483,
          'x1': 0.039012947243378865,
          'x2': 0.03567788748215518,
          'x3': 0.04228445262427446,
          'log_scale': 0.03938799596783373},
         't': {'Intercept': -0.5900689950009721,
          'C(x0)[T.1.0]': -9.413102620635625,
          'C(x0)[T.2.0]': -3.9386763559541733,
          'C(x0)[T.3.0]': 4.759844874711672,
          'C(x0)[T.4.0]': 9.624551136353627,
          'x1': -26.927457053616028,
          'x2': 27.170139858415496,
          'x3': -24.810063784622457,
          'log_scale': -0.08025885084050352},
         'p': {'Intercept': 0.5552789112834418,
          'C(x0)[T.1.0]': 3.261200182931364e-20,
          'C(x0)[T.2.0]': 8.767009118733042e-05,
          'C(x0)[T.3.0]': 2.225591906755436e-06,
          'C(x0)[T.4.0]': 5.0565119785548374e-21,
          'x1': 2.6941765977222928e-120,
          'x2': 6.140077801578896e-122,
          'x3': 4.433480084779573e-106,
          'log_scale': 0.9360475893068044},
         'LowerCI95': {'Intercept': -0.20274203525756343,
          'C(x0)[T.1.0]': -1.1681184172002101,
          'C(x0)[T.2.0]': -0.6285906745810347,
          'C(x0)[T.3.0]': 0.31530858824527963,
          'C(x0)[T.4.0]': 0.9288052291709121,
          'x1': -1.1270769349850565,
          'x2': 0.8993603093189736,
          'x3': -1.1320573137732797,
          'log_scale': -0.08045468971600316},
         'UpperCI95': {'Intercept': 0.10900249734702894,
          'C(x0)[T.1.0]': -0.7650984104081409,
          'C(x0)[T.2.0]': -0.2105212353528409,
          'C(x0)[T.3.0]': 0.7576697462153161,
          'C(x0)[T.4.0]': 1.404557135281261,
          'x1': -0.973961987877088,
          'x2': 1.039386076166962,
          'x3': -0.9661026196389116,
          'log_scale': 0.07413221912942569}}
        )
    
    gauss_data = pd.DataFrame(
        {'parameter': {'Intercept': -0.05067484383141115,
          'C(x0)[T.1.0]': -1.0143061930443993,
          'C(x0)[T.2.0]': -0.3971840954689264,
          'C(x0)[T.3.0]': 0.5753637791236098,
          'C(x0)[T.4.0]': 0.985728742167362,
          'x1': -1.004261265657455,
          'x2': 1.0036102694585398,
          'x3': -0.9663778870783584,
          'log_scale': -0.023919114399871533},
         'SE': {'Intercept': 0.07722055643831538,
          'C(x0)[T.1.0]': 0.10101278708923679,
          'C(x0)[T.2.0]': 0.104603967674808,
          'C(x0)[T.3.0]': 0.10974016882550817,
          'C(x0)[T.4.0]': 0.11653658622831134,
          'x1': 0.03871973465287851,
          'x2': 0.035112526640896,
          'x3': 0.041017752484735624,
          'log_scale': 0.044721359562341675},
         't': {'Intercept': -0.6562351551026542,
          'C(x0)[T.1.0]': -10.04136428933834,
          'C(x0)[T.2.0]': -3.797027056408503,
          'C(x0)[T.3.0]': 5.242964224325773,
          'C(x0)[T.4.0]': 8.45853456043566,
          'x1': -25.93667737293742,
          'x2': 28.582684456823518,
          'x3': -23.55999118766897,
          'log_scale': -0.5348476574494171},
         'p': {'Intercept': 0.5118251695374081,
          'C(x0)[T.1.0]': 1.1634843172564667e-22,
          'C(x0)[T.2.0]': 0.00015534125248878233,
          'C(x0)[T.3.0]': 1.9312899816538485e-07,
          'C(x0)[T.4.0]': 9.612562157724122e-17,
          'x1': 1.2886901127279116e-113,
          'x2': 1.5560424999575672e-131,
          'x3': 8.250178221484976e-98,
          'log_scale': 0.5928751857384187},
         'LowerCI95': {'Intercept': -0.20220942722163693,
          'C(x0)[T.1.0]': -1.2125297142758271,
          'C(x0)[T.2.0]': -0.602454808264537,
          'C(x0)[T.3.0]': 0.3600139871620588,
          'C(x0)[T.4.0]': 0.7570419279518655,
          'x1': -1.0802433503539173,
          'x2': 0.9347068279175991,
          'x3': -1.0468695116024953,
          'log_scale': -0.11167855181518391},
         'UpperCI95': {'Intercept': 0.10085973955881458,
          'C(x0)[T.1.0]': -0.8160826718129716,
          'C(x0)[T.2.0]': -0.1919133826733159,
          'C(x0)[T.3.0]': 0.7907135710851607,
          'C(x0)[T.4.0]': 1.2144155563828583,
          'x1': -0.9282791809609926,
          'x2': 1.0725137109994805,
          'x3': -0.8858862625542214,
          'log_scale': 0.06384032301544082}}
        )
    igaus_data = pd.DataFrame(
        {'parameter': {'Intercept': 0.015507380092818813,
          'C(x0)[T.1.0]': -1.0742746781551051,
          'C(x0)[T.2.0]': -0.5337968634643917,
          'C(x0)[T.3.0]': 0.4447575656771606,
          'C(x0)[T.4.0]': 0.9585556112673872,
          'x1': -1.0061476563603395,
          'x2': 0.9704907418517553,
          'x3': -1.0224352894067417,
          'log_scale': -0.07381174244074165},
         'SE': {'Intercept': 0.05205589335852921,
          'C(x0)[T.1.0]': 0.05113532965214251,
          'C(x0)[T.2.0]': 0.05849851034575763,
          'C(x0)[T.3.0]': 0.07184131703670253,
          'C(x0)[T.4.0]': 0.07556076141616191,
          'x1': 0.02160085460229274,
          'x2': 0.019101752790833093,
          'x3': 0.022376939277996322,
          'log_scale': 0.04472135955073707},
         't': {'Intercept': 0.2978986449433006,
          'C(x0)[T.1.0]': -21.008462944564087,
          'C(x0)[T.2.0]': -9.124965068501155,
          'C(x0)[T.3.0]': 6.190832574101354,
          'C(x0)[T.4.0]': 12.685891371422295,
          'x1': -46.5790671195734,
          'x2': 50.80637114712806,
          'x3': -45.691471773895465,
          'log_scale': -1.6504807363246883},
         'p': {'Intercept': 0.7658429634300281,
          'C(x0)[T.1.0]': 2.453355296794166e-81,
          'C(x0)[T.2.0]': 3.9160343837869057e-19,
          'C(x0)[T.3.0]': 8.751741049980816e-10,
          'C(x0)[T.4.0]': 2.7929192597571282e-34,
          'x1': 8.004481454496086e-252,
          'x2': 3.497378900074067e-278,
          'x3': 3.594664097046771e-246,
          'log_scale': 0.09916151181043432},
         'LowerCI95': {'Intercept': -0.08664505802632347,
          'C(x0)[T.1.0]': -1.1746206382564037,
          'C(x0)[T.2.0]': -0.6485920398145426,
          'C(x0)[T.3.0]': 0.303778990159409,
          'C(x0)[T.4.0]': 0.8102781443600776,
          'x1': -1.0485363240157715,
          'x2': 0.9330062133182917,
          'x3': -1.0663469151115916,
          'log_scale': -0.16157117983328162},
         'UpperCI95': {'Intercept': 0.11765981821196106,
          'C(x0)[T.1.0]': -0.9739287180538065,
          'C(x0)[T.2.0]': -0.4190016871142408,
          'C(x0)[T.3.0]': 0.5857361411949122,
          'C(x0)[T.4.0]': 1.1068330781746967,
          'x1': -0.9637589887049076,
          'x2': 1.007975270385219,
          'x3': -0.9785236637018917,
          'log_scale': 0.013947694951798276}}
        )
    logit_data = pd.DataFrame(
        {'parameter': {'Intercept': 0.11428379509630593,
          'C(x0)[T.1.0]': -0.8927506627578917,
          'C(x0)[T.2.0]': -0.6768572727365714,
          'C(x0)[T.3.0]': 0.19296571224886447,
          'C(x0)[T.4.0]': 0.977848895641784,
          'x1': -0.8389359392227662,
          'x2': 1.0647418443315522,
          'x3': -0.7586936939315044},
         'SE': {'Intercept': 0.18462211945872287,
          'C(x0)[T.1.0]': 0.24715627036623095,
          'C(x0)[T.2.0]': 0.2534297193131763,
          'C(x0)[T.3.0]': 0.26172705068034113,
          'C(x0)[T.4.0]': 0.28860583642537446,
          'x1': 0.10144755049058105,
          'x2': 0.09913664759486493,
          'x3': 0.10604506889364185},
         't': {'Intercept': 0.6190146415357185,
          'C(x0)[T.1.0]': -3.6120898791482516,
          'C(x0)[T.2.0]': -2.6707888663213315,
          'C(x0)[T.3.0]': 0.7372784423591815,
          'C(x0)[T.4.0]': 3.3881812916650036,
          'x1': -8.269652004073354,
          'x2': 10.740143732545416,
          'x3': -7.154445763927392},
         'p': {'Intercept': 0.5360488367247128,
          'C(x0)[T.1.0]': 0.00031896378872578815,
          'C(x0)[T.2.0]': 0.007691168293158921,
          'C(x0)[T.3.0]': 0.4611273826617035,
          'C(x0)[T.4.0]': 0.0007312416357189204,
          'x1': 4.286649102213222e-16,
          'x2': 1.5680792166143051e-25,
          'x3': 1.6309138936946419e-12},
         'LowerCI95': {'Intercept': -0.24801094559903497,
          'C(x0)[T.1.0]': -1.3777598108821012,
          'C(x0)[T.2.0]': -1.1741771752068069,
          'C(x0)[T.3.0]': -0.3206365269475637,
          'C(x0)[T.4.0]': 0.41150084927851915,
          'x1': -1.0380123776631767,
          'x2': 0.8702002252715614,
          'x3': -0.966792110575623},
         'UpperCI95': {'Intercept': 0.4765785357916467,
          'C(x0)[T.1.0]': -0.4077415146336824,
          'C(x0)[T.2.0]': -0.17953737026633593,
          'C(x0)[T.3.0]': 0.7065679514452926,
          'C(x0)[T.4.0]': 1.5441969420050488,
          'x1': -0.6398595007823558,
          'x2': 1.2592834633915428,
          'x3': -0.5505952772873859}}
        )
    nbinm_data = pd.DataFrame(
        {'parameter': {'Intercept': 0.11195672929423926,
          'C(x0)[T.1.0]': -1.149327130057412,
          'C(x0)[T.2.0]': -0.6950014327871774,
          'C(x0)[T.3.0]': 0.3354508023048596,
          'C(x0)[T.4.0]': 0.7598208374814449,
          'x1': -0.9318035576885686,
          'x2': 0.9396114837326345,
          'x3': -0.973132521129038,
          'log_scale': 0.3327033204497417},
         'SE': {'Intercept': 0.12247714065637152,
          'C(x0)[T.1.0]': 0.17486780563513152,
          'C(x0)[T.2.0]': 0.1733568631066699,
          'C(x0)[T.3.0]': 0.1667188173017595,
          'C(x0)[T.4.0]': 0.17931324001482044,
          'x1': 0.06567256964141412,
          'x2': 0.06199049025419926,
          'x3': 0.06904687886176089,
          'log_scale': 0.08197417462388798},
         't': {'Intercept': 0.9141030619611794,
          'C(x0)[T.1.0]': -6.572548479595653,
          'C(x0)[T.2.0]': -4.009079423406095,
          'C(x0)[T.3.0]': 2.012075227823244,
          'C(x0)[T.4.0]': 4.237393944912517,
          'x1': -14.188626435304872,
          'x2': 15.15734881075545,
          'x3': -14.09379449398939,
          'log_scale': 4.0586358078778275},
         'p': {'Intercept': 0.36088503930345095,
          'C(x0)[T.1.0]': 7.982404918401061e-11,
          'C(x0)[T.2.0]': 6.552960463856039e-05,
          'C(x0)[T.3.0]': 0.04448222879227262,
          'C(x0)[T.4.0]': 2.4721894570300607e-05,
          'x1': 9.778925473074918e-42,
          'x2': 7.877857993019027e-47,
          'x3': 3.001239084709416e-41,
          'log_scale': 5.324599141486233e-05},
         'LowerCI95': {'Intercept': -0.12838759532889255,
          'C(x0)[T.1.0]': -1.492480835462914,
          'C(x0)[T.2.0]': -1.0351901239900183,
          'C(x0)[T.3.0]': 0.00828835115994736,
          'C(x0)[T.4.0]': 0.40794358645823076,
          'x1': -1.0606768258930883,
          'x2': 0.8179637833262055,
          'x3': -1.1086274010587143,
          'log_scale': 0.17184042365993096},
         'UpperCI95': {'Intercept': 0.35230105391737104,
          'C(x0)[T.1.0]': -0.8061734246519099,
          'C(x0)[T.2.0]': -0.3548127415843365,
          'C(x0)[T.3.0]': 0.6626132534497717,
          'C(x0)[T.4.0]': 1.111698088504659,
          'x1': -0.8029302894840489,
          'x2': 1.0612591841390635,
          'x3': -0.8376376411993619,
          'log_scale': 0.4935662172395524}}
        )
    poiss_data = pd.DataFrame(
        {'parameter': {'Intercept': 0.026242527709284785,
          'C(x0)[T.1.0]': -1.0870115632783413,
          'C(x0)[T.2.0]': -0.5943772163913533,
          'C(x0)[T.3.0]': 0.42513982346868395,
          'C(x0)[T.4.0]': 0.9652006652049123,
          'x1': -1.0324233154534617,
          'x2': 0.9834397538902762,
          'x3': -1.0236348450967716},
         'SE': {'Intercept': 0.04753850164401099,
          'C(x0)[T.1.0]': 0.07390199862554822,
          'C(x0)[T.2.0]': 0.06317591474168963,
          'C(x0)[T.3.0]': 0.054141439401764115,
          'C(x0)[T.4.0]': 0.05250678313556393,
          'x1': 0.018234985628942484,
          'x2': 0.01821195293143796,
          'x3': 0.01964483239908622},
         't': {'Intercept': 0.5520268161962754,
          'C(x0)[T.1.0]': -14.708824977604285,
          'C(x0)[T.2.0]': -9.408288250698257,
          'C(x0)[T.3.0]': 7.852392329540308,
          'C(x0)[T.4.0]': 18.38239952184696,
          'x1': -56.6177202692611,
          'x2': 53.9996867767342,
          'x3': -52.10707957703859},
         'p': {'Intercept': 0.581054319702838,
          'C(x0)[T.1.0]': 1.8940125298972054e-44,
          'C(x0)[T.2.0]': 3.395074398557635e-20,
          'C(x0)[T.3.0]': 1.055573973536374e-14,
          'C(x0)[T.4.0]': 3.5755287890262007e-65,
          'x1': 5.3086747692e-313,
          'x2': 1.3464961811468024e-297,
          'x3': 3.1407997811764336e-286},
         'LowerCI95': {'Intercept': -0.06704504355604586,
          'C(x0)[T.1.0]': -1.2320337605503022,
          'C(x0)[T.2.0]': -0.7183509943797958,
          'C(x0)[T.3.0]': 0.31889492276858056,
          'C(x0)[T.4.0]': 0.8621635457274777,
          'x1': -1.0682068900835755,
          'x2': 0.9477013776643102,
          'x3': -1.0621850441785323},
         'UpperCI95': {'Intercept': 0.1195300989746154,
          'C(x0)[T.1.0]': -0.9419893660063804,
          'C(x0)[T.2.0]': -0.47040343840291093,
          'C(x0)[T.3.0]': 0.5313847241687873,
          'C(x0)[T.4.0]': 1.068237784682347,
          'x1': -0.9966397408233479,
          'x2': 1.0191781301162421,
          'x3': -0.9850846460150109}}
        )
    
    seed = 23644
    rng = np.random.default_rng(seed)
    n_obs = 1_000
    formula = "1+C(x0)+x1+x2+x3"
    msim = LinearModelSim.from_formula(formula, n_obs, 
                                       nlevels={"x0":5},
                                       coef_kws=dict(p_nnz=(1., 1.,)),
                                       corr_kws={"eig_kws":{"p_eff":0.5, "a":4}},
                                       rng=rng,
                                       seed=seed)
    
    
    data = msim.data
    data["linpred"] = msim.linpred#msim._simulate_y(msim.linpred, resid_var)
    
    data["mubinom"] = LogitLink().inv_link(data["linpred"])
    data["mugamma"] = LogLink().inv_link(data["linpred"])
    data["mugauss"] = IdentityLink().inv_link(data["linpred"])
    data["muigaus"] = LogLink().inv_link(data["linpred"])
    data["mupoiss"] = LogLink().inv_link(data["linpred"])
    
    data["ybinom"] = Binomial(weights=np.ones(n_obs, dtype=int)*10).rvs(mu=data["mubinom"], rng=rng)
    data["ygamma"] = Gamma().rvs(mu=data["mugamma"], rng=rng)
    data.loc[data["ygamma"]<1e-8, "ygamma"] = 1e-8
    data["ygauss"] = Gaussian().rvs(mu=data["mugauss"], phi=1, rng=rng)
    data["yigaus"] = InverseGaussian().rvs(mu=data["muigaus"], rng=rng)
    data["ylogit"] = Binomial().rvs(mu=data["mubinom"], rng=rng)
    data["ypoiss"] = Poisson().rvs(mu=data["mupoiss"], rng=rng)
    data["ynegbn"] = NegativeBinomial().rvs(mu=data["mupoiss"], dispersion=np.sqrt(2), rng=rng)
    data["yordin"], tau = func_utils.quantile_cut(data["ygauss"], 7, return_quantiles=True)
    #data.to_csv("/users/lukepinkel/Downloads/glmdata.csv")
    
    model_olslm = OLS(formula="ygauss~"+formula, data=data)
    model_olslm._fit()
    
    model_binom = GLM(formula="ybinom~"+formula, data=data, weights=np.ones(n_obs, dtype=int)*10., family=Binomial())
    model_gamma = GLM(formula="ygamma~"+formula, data=data, family=Gamma(link=LogLink()), scale_estimator="NR")
    model_gauss = GLM(formula="ygauss~"+formula, data=data, family=Gaussian(), scale_estimator="NR")
    
    model_igaus = GLM(formula="yigaus~"+formula, data=data, family=InverseGaussian(link=LogLink()), scale_estimator="NR")
    model_logit = GLM(formula="ylogit~"+formula, data=data, family=Binomial(link=LogitLink()))
    model_poiss = GLM(formula="ypoiss~"+formula, data=data, family=Poisson())
    model_nbinm = GLM(formula="ynegbn~"+formula, data=data, family=NegativeBinomial(), scale_estimator="NR")
    model_clmlg = CLM(formula="yordin~+"+formula, data=data)
    
    
    model_binom.fit()
    model_gamma.fit()
    
    model_gauss.fit()
    model_igaus.fit(opt_kws=dict(options=dict(initial_tr_radius=1.01)))
    model_logit.fit()
    model_poiss.fit()
    model_nbinm.fit(opt_kws=dict(options=dict(gtol=1e-12, xtol=1e-200)))
    model_clmlg.fit()
    
    check_model(model_binom)
    check_model(model_gamma)
    check_model(model_gauss)
    check_model(model_igaus)
    check_model(model_logit)
    check_model(model_poiss)
    check_model(model_nbinm)
    check_ordinal_model(model_clmlg)
    
    #assert(np.allclose(model_binom.res, binom_data))
    #assert(np.allclose(model_gamma.res, gamma_data))
    #assert(np.allclose(model_gauss.res, gauss_data))
    #assert(np.allclose(model_igaus.res, igaus_data))
    #assert(np.allclose(model_logit.res, logit_data))
    #assert(np.allclose(model_poiss.res, poiss_data))
    #assert(np.allclose(model_nbinm.res, nbinm_data))
    #assert(np.allclose(model_clmlg.res, clmlg_data))

    
    
    
    
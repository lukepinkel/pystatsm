# -*- coding: utf-8 -*-
"""
Created on Tue Oct  5 08:24:10 2021

@author: lukepinkel
"""

import numpy as np
import pandas as pd
from pystatsm.pyglmnet.lars import lars


def test_lasso_diabetes():
    data = pd.read_csv("https://web.stanford.edu/~hastie/Papers/LARS/diabetes.data", sep="\t")
    X, y = data.iloc[:, :10].values, data.iloc[:, 10].values
    
    
    X = (X - np.mean(X, axis=0)) / np.std(X, axis=0)
    y = (y - np.mean(y, axis=0)) / np.std(y, axis=0)
    
    lambdas1, active1, betas1 = lars(X, y, method="lasso")
    
    
    lambdas2 = np.array([0.58645013, 0.54931411, 0.27974603, 0.19523319, 0.08037882,
                         0.05484056, 0.04259839, 0.01234203, 0.00338338, 0.00314292,
                         0.00134795, 0.00080944, 0.        ])
    
    active2 = np.array([2, 8, 3, 1, 9, 4, 7, 5, 0, 6])
    
    betas2 = np.array([[ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                         0.        ,  0.        ,  0.        ,  0.        ,  0.        ],
                       [ 0.        ,  0.        ,  0.03713602,  0.        ,  0.        ,
                         0.        ,  0.        ,  0.        ,  0.        ,  0.        ],
                       [ 0.        ,  0.        ,  0.22353914,  0.        ,  0.        ,
                         0.        ,  0.        ,  0.        ,  0.18640312,  0.        ],
                       [ 0.        ,  0.        ,  0.26854447,  0.0489414 ,  0.        ,
                         0.        ,  0.        ,  0.        ,  0.23157906,  0.        ],
                       [ 0.        ,  0.        ,  0.3123399 ,  0.11814279,  0.        ,
                         0.        , -0.07047835,  0.        ,  0.27157338,  0.        ],
                       [ 0.        , -0.04627094,  0.31585363,  0.14462971,  0.        ,
                         0.        , -0.10482523,  0.        ,  0.27836875,  0.        ],
                       [ 0.        , -0.06916613,  0.31628373,  0.15597924,  0.        ,
                         0.        , -0.12109318,  0.        ,  0.27943449,  0.00746135],
                       [ 0.        , -0.12214898,  0.32259739,  0.18354697, -0.0642054 ,
                         0.        , -0.13831413,  0.        ,  0.31795115,  0.03382989],
                       [ 0.        , -0.13967678,  0.32545159,  0.19418902, -0.12051248,
                         0.        , -0.09418185,  0.06568544,  0.32731918,  0.03983357],
                       [ 0.        , -0.14032215,  0.32514516,  0.1945366 , -0.14666744,
                         0.02082493, -0.08311058,  0.06880742,  0.33695904,  0.03990743],
                       [-0.00353116, -0.14478137,  0.32283494,  0.19786638, -0.34235785,
                         0.17710989,  0.        ,  0.09197274,  0.4095421 ,  0.04097224],
                       [-0.00432939, -0.14645108,  0.32186294,  0.19861163, -0.35852405,
                         0.19386515,  0.        ,  0.0863873 ,  0.41689456,  0.04149633],
                       [-0.00618293, -0.14813008,  0.32110005,  0.20036692, -0.48931352,
                         0.29447365,  0.06241272,  0.10936897,  0.46404908,  0.04177187]])
                            
    
    assert(np.allclose(betas1, betas2))
    assert(np.allclose(lambdas1, lambdas2))
    assert(np.allclose(active1, active2))

def test_lars_diabetes():
    data = pd.read_csv("https://web.stanford.edu/~hastie/Papers/LARS/diabetes.data", sep="\t")
    X, y = data.iloc[:, :10].values, data.iloc[:, 10].values
    
    
    X = (X - np.mean(X, axis=0)) / np.std(X, axis=0)
    y = (y - np.mean(y, axis=0)) / np.std(y, axis=0)
    
    lambdas1, active1, betas1 = lars(X, y, method="lar")
    
    lambdas2 = np.array([0.58645013, 0.54931411, 0.27974603, 0.19523319, 0.08037882,
                         0.05484056, 0.04259839, 0.01234203, 0.00338338, 0.00314292,
                         0.        ])
    active2 = np.array([2, 8, 3, 6, 1, 9, 4, 7, 5, 0])
    betas2 = np.array([[ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
                         0.        ,  0.        ,  0.        ,  0.        ,  0.        ],
                       [ 0.        ,  0.        ,  0.03713602,  0.        ,  0.        ,
                         0.        ,  0.        ,  0.        ,  0.        ,  0.        ],
                       [ 0.        ,  0.        ,  0.22353914,  0.        ,  0.        ,
                         0.        ,  0.        ,  0.        ,  0.18640312,  0.        ],
                       [ 0.        ,  0.        ,  0.26854447,  0.0489414 ,  0.        ,
                         0.        ,  0.        ,  0.        ,  0.23157906,  0.        ],
                       [ 0.        ,  0.        ,  0.3123399 ,  0.11814279,  0.        ,
                         0.        , -0.07047835,  0.        ,  0.27157338,  0.        ],
                       [ 0.        , -0.04627094,  0.31585363,  0.14462971,  0.        ,
                         0.        , -0.10482523,  0.        ,  0.27836875,  0.        ],
                       [ 0.        , -0.06916613,  0.31628373,  0.15597924,  0.        ,
                         0.        , -0.12109318,  0.        ,  0.27943449,  0.00746135],
                       [ 0.        , -0.12214898,  0.32259739,  0.18354697, -0.0642054 ,
                         0.        , -0.13831413,  0.        ,  0.31795115,  0.03382989],
                       [ 0.        , -0.13967678,  0.32545159,  0.19418902, -0.12051248,
                         0.        , -0.09418185,  0.06568544,  0.32731918,  0.03983357],
                       [ 0.        , -0.14032215,  0.32514516,  0.1945366 , -0.14666744,
                         0.02082493, -0.08311058,  0.06880742,  0.33695904,  0.03990743],
                       [-0.00618293, -0.14813008,  0.32110005,  0.20036692, -0.48931352,
                         0.29447365,  0.06241272,  0.10936897,  0.46404908,  0.04177187]])
    assert(np.allclose(betas1, betas2))
    assert(np.allclose(lambdas1, lambdas2))
    assert(np.allclose(active1, active2))
